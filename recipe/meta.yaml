{% set version = "4.6.0" %}

package:
  name: liblightgbm
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/l/lightgbm/lightgbm-{{ version }}.tar.gz
  sha256: cb1c59720eb569389c0ba74d14f52351b573af489f230032a1c9f314f8bab7fe
  patches:
    - patches/0001-boost-shared.patch
    # Taken from https://github.com/microsoft/LightGBM/blob/v4.5.0/build-python.sh#L308-L316
    # except that we don't copy lib_lightgbm.so to SP_DIR
    - patches/0002-use-precompiled.patch
    # Compatibility fix for Boost 1.86
    - patches/0003-boost-sha1.patch
    # use C++17
    - patches/0004-use-cxx-17.patch
    # avoid trying to compile for unsupported GPU architectures when targeting CUDA 13
    - patches/0005-drop-arches-for-cuda13.patch

build:
  number: 5
  string: cuda_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  # CUDA is not supported in windows
  skip: true  # [cuda_compiler_version != "None" and win]
  run_exports:
    # Pin conservatively as we don't know ABI guarantees
    - {{ pin_subpackage("liblightgbm", max_pin="x.x.x") }}

requirements:
  build:
    - cmake >=3.28
    - make    # [not win]
    - ninja   # [win]
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
  host:
    - llvm-openmp  # [osx]
    - libgomp  # [linux]
    - libboost-devel              # [cuda_compiler_version == "None"]
    - ocl-icd                     # [cuda_compiler_version == "None" and linux]
    - khronos-opencl-icd-loader   # [cuda_compiler_version == "None" and not linux]
  run:
    - __cuda                      # [cuda_compiler_version != "None"]
  run_constrained:
    - lightgbm {{ version }} cuda_*_{{ PKG_BUILDNUM }}   # [cuda_compiler_version != "None"]
    - lightgbm {{ version }} cpu_*_{{ PKG_BUILDNUM }}    # [cuda_compiler_version == "None"]

test:
  commands:
    - test -f $PREFIX/lib/lib_lightgbm${SHLIB_EXT}  # [unix]

outputs:
  - name: liblightgbm

  - name: lightgbm
    script: install-python.sh
    build:
      noarch: python
      string: cuda_py_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py_{{ PKG_BUILDNUM }}   # [cuda_compiler_version == "None"]
      # TODO: remove this when conda-build bug is fixed where `noarch` subpackages
      # when tested does not find dependencies from target_platform.
      skip: True  # [build_platform != target_platform]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - python {{ python_min }}
        - pip
        - setuptools
      run:
        - python >={{ python_min }}
        - {{ pin_subpackage("liblightgbm", max_pin="x.x.x") }}
        - numpy >=1.17.0
        - scipy
      # optional dependencies from [project.optional-dependencies]
      # at https://github.com/microsoft/LightGBM/blob/master/python-package/pyproject.toml
      run_constrained:
        - cffi >=1.15.1
        - dask >=2.0.0
        - pandas >=0.24.0
        - pyarrow >=6.0.1
        - scikit-learn >=0.24.2
    test:
      files:
        - python_run_test.py
      imports:
        - lightgbm
        - lightgbm.basic
        - lightgbm.callback
        - lightgbm.compat
        - lightgbm.dask
        - lightgbm.engine
        - lightgbm.libpath
        - lightgbm.plotting
        - lightgbm.sklearn
      requires:
        - pip
        - scikit-learn
        - python {{ python_min }}
      commands:
        - pip check
        - python python_run_test.py
        - python -c "from lightgbm import __version__"

about:
  home: https://github.com/microsoft/LightGBM
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: LightGBM is a gradient boosting framework that uses tree based learning algorithms.

  description: |
    A fast, distributed, high performance gradient boosting (GBDT, GBRT, GBM or MART) framework based on decision tree algorithms, used for ranking, classification and many other machine learning tasks.
  doc_url: https://lightgbm.readthedocs.io/en/v{{ version }}/
  dev_url: https://github.com/microsoft/LightGBM

extra:
  feedstock-name: lightgbm
  recipe-maintainers:
    - synapticarbors
    - aldanor
    - xhochy
    - jameslamb
